import { Test, TestingModule } from '@nestjs/testing';
import { UsersService } from './users.service';
import { PrismaService } from '../prisma/prisma.service';
import { AuthProvider } from './auth.provider';
import { RegisterDto } from './dto/register.dto';
import { LoginDto } from './dto/login.dto';
import { UserType } from '@prisma/client';
import { BadRequestException, NotFoundException, UnauthorizedException } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { describe, it, expect, beforeEach, vi, type Mock } from 'vitest';
import type { MultipartFile } from '@fastify/multipart';
import type { FastifyReply } from 'fastify';
import * as fs from 'fs';
import * as path from 'path';

// Define mock types
type MockedFunction<T extends (...args: any) => any> = Mock & T;

// Mock fs module with proper types
vi.mock('fs', () => ({
    default: {
        existsSync: vi.fn(),
        mkdirSync: vi.fn(),
        createWriteStream: vi.fn(),
        unlink: vi.fn(),
        unlinkSync: vi.fn()
    },
    existsSync: vi.fn(),
    mkdirSync: vi.fn(),
    createWriteStream: vi.fn(),
    unlink: vi.fn(),
    unlinkSync: vi.fn()
}));

// Create properly typed mock functions
const mockedExistsSync = fs.existsSync as MockedFunction<typeof fs.existsSync>;
const mockedMkdirSync = fs.mkdirSync as MockedFunction<typeof fs.mkdirSync>;
const mockedCreateWriteStream = fs.createWriteStream as MockedFunction<typeof fs.createWriteStream>;
const mockedUnlink = fs.unlink as unknown as MockedFunction<typeof fs.unlink>;
const mockedUnlinkSync = fs.unlinkSync as MockedFunction<typeof fs.unlinkSync>;

// Mock path.join
vi.spyOn(path, 'join').mockImplementation((...args: string[]) => args.join('/'));

// Define service mocks with proper types
type MockPrismaService = {
    user: {
        findUnique: MockedFunction<any>;
        findFirst: MockedFunction<any>;
        create: MockedFunction<any>;
        update: MockedFunction<any>;
        delete: MockedFunction<any>;
        findMany: MockedFunction<any>;
    };
};

const mockPrismaService: MockPrismaService = {
    user: {
        findUnique: vi.fn(),
        findFirst: vi.fn(),
        create: vi.fn(),
        update: vi.fn(),
        delete: vi.fn(),
        findMany: vi.fn(),
    },
};

type MockAuthProvider = {
    hashPassword: MockedFunction<any>;
    register: MockedFunction<any>;
    login: MockedFunction<any>;
    sendResetPasswordMail: MockedFunction<any>;
};

const mockAuthProvider: MockAuthProvider = {
    hashPassword: vi.fn(),
    register: vi.fn(),
    login: vi.fn(),
    sendResetPasswordMail: vi.fn(),
} satisfies Partial<AuthProvider>;

const mockConfigService = {
    get: vi.fn((key: string) => {
        if (key === 'CLIENT_URL') return 'http://localhost:3000';
        if (key === 'PROFILE_IMAGE_PATH') return 'uploads/profile-images';
        return null;
    }),
};

describe('UsersService', () => {
    let service: UsersService;
    let prisma: PrismaService;
    let authProvider: AuthProvider;

    beforeEach(async () => {
        vi.clearAllMocks(); // Clear mocks before each test
        const module: TestingModule = await Test.createTestingModule({
            providers: [
                UsersService,
                {
                    provide: PrismaService,
                    useValue: mockPrismaService,
                },
                {
                    provide: AuthProvider,
                    useValue: mockAuthProvider,
                },
                {
                    provide: ConfigService,
                    useValue: mockConfigService,
                },
            ],
        }).compile();

        service = module.get<UsersService>(UsersService);
        prisma = module.get<PrismaService>(PrismaService);
        authProvider = module.get<AuthProvider>(AuthProvider);
    });

    it('should be defined', () => {
        expect(service).toBeDefined();
    });

    // Test sections...
    // Previous test sections remain unchanged...

    // File operation tests
    describe('updateProfilePicture', () => {
        const mockFile: MultipartFile = {
            file: {
                pipe: vi.fn().mockReturnThis(),
                on: vi.fn().mockImplementation((event, callback) => {
                    if (event === 'finish') callback();
                    return { on: vi.fn() };
                })
            } as any,
            filename: 'test.jpg',
            mimetype: 'image/jpeg',
            encoding: '7bit',
            fields: {},
            type: 'file',
            fieldname: 'file',
            toBuffer: () => Promise.resolve(Buffer.from(''))
        };

        const testUserId = 'test-user-profile-id';
        const testUser = {
            id: testUserId,
            profilePic: 'old-profile.jpg',
            email: 'test@example.com',
            name: 'Test User'
        };

        beforeEach(() => {
            mockedExistsSync.mockReturnValue(true);
            mockedCreateWriteStream.mockReturnValue({
                on: vi.fn(),
                emit: vi.fn()
            } as any);
        });

        it('should update profile picture successfully', async () => {
            mockPrismaService.user.findUnique.mockResolvedValue(testUser);
            mockPrismaService.user.update.mockResolvedValue({
                ...testUser,
                profilePic: expect.stringContaining('.jpg')
            });

            const result = await service.updateProfilePicture(testUserId, mockFile);

            expect(result).toEqual({
                message: 'Profile picture updated successfully',
                filename: expect.stringContaining('.jpg'),
                imageUrl: expect.stringContaining('/images/')
            });
            expect(mockPrismaService.user.update).toHaveBeenCalledWith({
                where: { id: testUserId },
                data: { profilePic: expect.stringContaining('.jpg') }
            });
        });

        it('should throw NotFoundException if user not found', async () => {
            mockPrismaService.user.findUnique.mockResolvedValue(null);

            await expect(service.updateProfilePicture(testUserId, mockFile))
                .rejects.toThrow(NotFoundException);
        });

        it('should create upload directory if it does not exist', async () => {
            mockedExistsSync.mockReturnValueOnce(false);
            mockPrismaService.user.findUnique.mockResolvedValue(testUser);
            mockPrismaService.user.update.mockResolvedValue(testUser);

            await service.updateProfilePicture(testUserId, mockFile);

            expect(mockedMkdirSync).toHaveBeenCalledWith(expect.any(String), { recursive: true });
        });

        it('should delete old profile picture if exists', async () => {
            mockPrismaService.user.findUnique.mockResolvedValue(testUser);
            mockPrismaService.user.update.mockResolvedValue(testUser);

            await service.updateProfilePicture(testUserId, mockFile);

            expect(mockedUnlink).toHaveBeenCalledWith(expect.stringContaining('old-profile.jpg'), expect.any(Function));
        });
    });

    describe('deleteProfilePicture', () => {
        const testUserId = 'test-user-delete-id';
        const testUser = {
            id: testUserId,
            profilePic: 'profile.jpg',
            email: 'test@example.com',
            name: 'Test User'
        };

        it('should delete profile picture successfully', async () => {
            mockPrismaService.user.findUnique.mockResolvedValue(testUser);
            mockPrismaService.user.update.mockResolvedValue({ ...testUser, profilePic: null });
            mockedUnlink.mockImplementation((path, callback) => {
                if (callback) callback();
                return Promise.resolve();
            });

            const result = await service.deleteProfilePicture(testUserId);

            expect(result).toEqual({ message: 'Profile picture deleted successfully' });
            expect(mockPrismaService.user.update).toHaveBeenCalledWith({
                where: { id: testUserId },
                data: { profilePic: null }
            });
            expect(mockedUnlink).toHaveBeenCalled();
        });

        it('should throw NotFoundException if user not found', async () => {
            mockPrismaService.user.findUnique.mockResolvedValue(null);

            await expect(service.deleteProfilePicture(testUserId))
                .rejects.toThrow(NotFoundException);
        });

        it('should throw BadRequestException if user has no profile picture', async () => {
            mockPrismaService.user.findUnique.mockResolvedValue({ 
                ...testUser, 
                profilePic: null 
            });

            await expect(service.deleteProfilePicture(testUserId))
                .rejects.toThrow(BadRequestException);
        });
    });

    describe('getProfilePicture', () => {
        const testUserId = 'test-user-get-id';
        const testUser = {
            id: testUserId,
            profilePic: 'profile.jpg',
            email: 'test@example.com',
            name: 'Test User'
        };

        const mockReply = {
            sendFile: vi.fn().mockResolvedValue(undefined)
        } as unknown as FastifyReply;

        beforeEach(() => {
            mockedExistsSync.mockReturnValue(true);
        });

        it('should send profile picture successfully', async () => {
            mockPrismaService.user.findUnique.mockResolvedValue(testUser);

            await service.getProfilePicture(testUserId, mockReply);

            expect(mockReply.sendFile).toHaveBeenCalledWith(
                'profile.jpg',
                expect.any(String)
            );
        });

        it('should throw NotFoundException if user not found', async () => {
            mockPrismaService.user.findUnique.mockResolvedValue(null);

            await expect(service.getProfilePicture(testUserId, mockReply))
                .rejects.toThrow(NotFoundException);
        });

        it('should throw BadRequestException if user has no profile picture', async () => {
            mockPrismaService.user.findUnique.mockResolvedValue({
                ...testUser,
                profilePic: null
            });

            await expect(service.getProfilePicture(testUserId, mockReply))
                .rejects.toThrow(BadRequestException);
        });

        it('should throw BadRequestException if profile picture file not found', async () => {
            mockPrismaService.user.findUnique.mockResolvedValue(testUser);
            mockedExistsSync.mockReturnValueOnce(false);

            await expect(service.getProfilePicture(testUserId, mockReply))
                .rejects.toThrow(BadRequestException);
        });
    });
});
